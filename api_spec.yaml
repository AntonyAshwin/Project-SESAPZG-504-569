openapi: 3.0.0
info:
  title: Gold Asset Management API
  version: 1.0.0
  description: API for managing gold assets on the blockchain

servers:
  - url: http://localhost:8080/api

paths:
  /register:
    post:
      summary: Registers a new user (either a buyer or a seller)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input
        '500':
          description: Server error

  /login:
    post:
      summary: Authenticates a user and provides an access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Authentication successful
        '400':
          description: Invalid credentials
        '500':
          description: Server error

  #Transaction API endpoint
  /v1/transaction:
    post:
      summary: Adds a new transaction for a gold asset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction added successfully
        '400':
          description: Invalid input
        '500':
          description: Server error
    get:
      summary: Retrieves transaction logs for a user's gold assets with pagination, sorting, and filtering
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
            default: transactionTime
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: filterBy
          in: query
          required: false
          schema:
            type: string
            enum: [register, transfer]
      responses:
        '200':
          description: List of transaction logs
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error
          
  /v1/verifygold/{goldId}:
    get:
      summary: Fetches details of a specific gold asset
      parameters:
        - name: goldId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gold asset details
        '404':
          description: Gold asset not found
        '500':
          description: Server error

  # **New Profile endpoints added**
  # Profile related endpoints
  /v1/profile:
    get:
      summary: Retrieves the profile details of the authenticated user
      security:
        - bearerAuth: []  # Secured with JWT Bearer token
      responses:
        '200':
          description: Successfully retrieved profile details
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      summary: Updates the profile details of the authenticated user
      security:
        - bearerAuth: []  # Secured with JWT Bearer token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                oldPassword:
                  type: string
                address:
                  type: string
                phoneNumber:
                  type: string
                publicKey:
                  type: string
                aadhaarCardNumber:
                  type: string
                pan:
                  type: string
                gstin:
                  type: string
                businessAddress:
                  type: string
                businessLicense:
                  type: string
              required:
                - name
                - email
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid input or old password incorrect
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: User not found
        '500':
          description: Server error

  /v1/profile/verify-password:
    post:
      summary: Verifies the old password of the authenticated user
      security:
        - bearerAuth: []  # Secured with JWT Bearer token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
              required:
                - oldPassword
      responses:
        '200':
          description: Old password verified
        '400':
          description: Old password is incorrect
        '401':
          description: Unauthorized (token missing or invalid)
        '500':
          description: Server error
    
components:
  schemas:
    RegisterUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: ['buyer', 'seller']
        dateOfBirth:
          type: string
          format: date
        address:
          type: string
        phoneNumber:
          type: string
        aadhaarCardNumber:
          type: string
        publicKey:
          type: string
        pan:
          type: string
        gstin:
          type: string
        businessAddress:
          type: string
        businessLicense:
          type: string
      required:
        - name
        - email
        - password
        - role
        - dateOfBirth
        - address
        - phoneNumber
        - aadhaarCardNumber
        - publicKey
        - pan

    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    Transaction:
      type: object
      properties:
        goldId:
          type: string
        transactionType:
          type: string
          enum: ['register', 'transfer']
        recipientPublicKey:
          type: string
          description: "Public key of the recipient (only for transfer transactions)"
        transactionHash:
          type: string
      required:
        - goldId
        - transactionType
        - transactionHash

      # Added security scheme definition for JWT token
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
